apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

androidExtensions {
    experimental = true
}

def keyPropertiesFile = rootProject.file("key.properties");
def keyProperties = new Properties();
keyProperties.load(new FileInputStream(keyPropertiesFile));

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "vn.asiantech.way"
        minSdkVersion 16
        targetSdkVersion 26
        multiDexEnabled true
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('../keystores/debug.jks')
        }

        production {
            if (!System.getenv('CI')) {
                def signFile = file("../local.properties")
                def signingProps = new Properties()
                signingProps.load(new FileInputStream(signFile))
                storeFile file("../keystores/release.jks")
                storePassword signingProps['storePassword']
                keyAlias signingProps['keyAlias']
                keyPassword signingProps['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
    }

    applicationVariants.all { variant ->
        switch (variant.getName()) {
            case "debug":
                def APP_NAME = "[DEV] WAY"
                variant.resValue("string", "app_name", "${APP_NAME}")
                variant.buildConfigField "String", "HYPERTRACK_PK", keyProperties['HYPERTRACK_PUBLISHABLE_KEY']
                variant.buildConfigField "String", "HYPERTRACK_BASE_URL", '"https://api.hypertrack.com/api/v1/"'
                variant.resValue "string", "deeplink_scheme", "com.hypertracklive"
                variant.resValue "string", "tracking_url", "www.trck.at"
                break;
            case "release":
                def APP_NAME = "WAY"
                variant.resValue("string", "app_name", "${APP_NAME}")
                variant.resValue "string", "deeplink_scheme", "com.hypertracklive"
                variant.resValue "string", "tracking_url", "www.trck.at"
                variant.buildConfigField "String", "HYPERTRACK_PK", keyProperties['HYPERTRACK_PUBLISHABLE_KEY']
                variant.buildConfigField "String", "HYPERTRACK_BASE_URL", '"https://api.hypertrack.com/api/v1/"'
        }
    }

    lintOptions {
        abortOnError false
        lintConfig file('lint.xml')
        xmlOutput file("${buildDir}/reports/lint-groups.xml")
    }
    dexOptions {
        jumboMode = true
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${applicationId}-${variant.versionName}.apk"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:support-v4:26.1.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation('com.hypertrack:android:0.4.8:release@aar') {
        transitive = true;
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    implementation 'at.blogc:expandabletextview:1.0.3'

    // Retrofit 2
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    // Google play services
    implementation 'com.google.android.gms:play-services-gcm:11.2.2'
    implementation 'com.google.android.gms:play-services-places:11.2.2'
    implementation 'com.google.android.gms:play-services-location:11.2.2'
    implementation 'com.google.firebase:firebase-messaging:11.2.2'
    implementation 'com.google.firebase:firebase-database:11.2.2'

    // Common
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'

    // Circle ImageView
    implementation 'de.hdodenhof:circleimageview:2.1.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.1'

    // Picasso
    implementation 'com.squareup.picasso:picasso:2.4.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.3.1'

    //Rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Anko Layouts
    implementation "org.jetbrains.anko:anko-sdk25:$anko_version"
    // sdk15, sdk19, sdk21, sdk23 are also available
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"

    // Coroutine listeners for Anko Layouts
    implementation "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    implementation "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"
    implementation "org.jetbrains.anko:anko-recyclerview-v7-coroutines:$anko_version"

    implementation "org.jetbrains.anko:anko-design:$anko_version"
    implementation "org.jetbrains.anko:anko-design-coroutines:$anko_version"
}

/*
* Enable FCM integration for real time tracking by adding a google-services.json
* Once you have either an existing account on <a href="https://console.developers.google.com/">Google Developer</a>
* or a new account <a href="https://console.firebase.google.com">Firebase console</a>,
* you will need to add <a href="https://support.google.com/firebase/answer/7015592">google-services.json</a>
* file for your app to remove the below compilation failure.
*/
File googleServicesFile = rootProject.file("app/google-services.json");
if (googleServicesFile.exists()) {
    System.out.println("Google Service File Exist")
    apply plugin: 'com.google.gms.google-services'
}

apply from: "https://raw.githubusercontent.com/tientun/gradle-android-ci-check/master/ci.gradle"
apply from: "deploygate.gradle"
kotlin {
    experimental {
        coroutines "enable"
    }
}
