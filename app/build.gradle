apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def keyPropertiesFile = rootProject.file("key.properties");
def keyProperties = new Properties();
keyProperties.load(new FileInputStream(keyPropertiesFile));

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "vn.asiantech.way"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias 'android'
            keyPassword 'android'
            storeFile file('../keystores/debug.jks')
            storePassword 'android'
        }

        production {
            def signFile = file("../local.properties")
            def signingProps = new Properties()
            signingProps.load(new FileInputStream(signFile))
            storeFile file("../keystores/release.jks")
            storePassword signingProps['storePassword']
            keyAlias signingProps['keyAlias']
            keyPassword signingProps['keyPassword']
        }
    }

    buildTypes {
        production {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
    }

    applicationVariants.all { variant ->
        switch (variant.getName()) {
            case "debug":
                def APP_NAME = "[DEV] WAY"
                variant.resValue("string", "app_name", "${APP_NAME}")
                variant.buildConfigField "String", "HYPERTRACK_PK", keyProperties['HYPERTRACK_PUBLISHABLE_KEY']
                variant.buildConfigField "String", "HYPERTRACK_BASE_URL", '"https://api.hypertrack.com/api/v1/"'
                variant.resValue "string", "deeplink_scheme", "com.hypertracklive"
                variant.resValue "string", "tracking_url", "www.trck.at"
                break;
            case "release":
                def APP_NAME = "WAY"
                variant.resValue("string", "app_name", "${APP_NAME}")
        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name.equals("release")) {
            variant.setIgnore(true)
        }
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${applicationId}-${variant.versionName}.apk"
    }
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation('com.hypertrack:android:0.4.8:release@aar') {
        transitive = true;
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'

    // Retrofit 2
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'

    // Google play services
    implementation 'com.google.android.gms:play-services-gcm:11.2.2'
    implementation 'com.google.android.gms:play-services-places:11.2.2'
    implementation 'com.google.android.gms:play-services-location:11.2.2'
    implementation 'com.google.firebase:firebase-messaging:11.2.2'

    // Common
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    // Data binding
    kapt "com.android.databinding:compiler:3.0.0-beta7"

    // View model
    implementation "android.arch.lifecycle:runtime:1.0.0-alpha9-1"
    implementation "android.arch.lifecycle:extensions:1.0.0-alpha9-1"
    annotationProcessor 'android.arch.lifecycle:compiler:1.0.0-alpha9-1'

    // Reactive
    compile 'io.reactivex.rxjava2:rxjava:2.0.6'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Dagger 2
    implementation 'com.google.dagger:dagger:2.11'
    kapt "com.google.dagger:dagger-compiler:2.11"
}

/*
* Enable FCM integration for real time tracking by adding a google-services.json
* Once you have either an existing account on <a href="https://console.developers.google.com/">Google Developer</a>
* or a new account <a href="https://console.firebase.google.com">Firebase console</a>,
* you will need to add <a href="https://support.google.com/firebase/answer/7015592">google-services.json</a>
* file for your app to remove the below compilation failure.
*/
File googleServicesFile = rootProject.file("app/google-services.json");
if (googleServicesFile.exists()) {
    System.out.println("Google Service File Exist");
    apply plugin: 'com.google.gms.google-services'
}
